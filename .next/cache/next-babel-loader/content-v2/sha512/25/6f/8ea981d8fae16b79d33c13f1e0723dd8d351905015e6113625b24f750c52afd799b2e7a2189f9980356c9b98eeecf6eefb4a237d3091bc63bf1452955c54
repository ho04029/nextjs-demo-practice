{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Udemy-react\\\\nextjs\\\\pages\\\\index.js\";\n//1. 몽고디비 임포트\nimport { MongoClient } from \"mongodb\";\nimport MeetupList from \"../components/meetups/MeetupList\";\n\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 10\n  }, this);\n}\n\nexport async function getStaticProps() {\n  //2. new-meetup작업할 때 사용했던 것을 붙여넣기\n  const clinet = await MongoClient.connect(\"mongodb+srv://ho04029:4Fils6gxzqhCs40l@boilerplate.xzicw.mongodb.net/?retryWrites=true&w=majority\");\n  const db = clinet.db();\n  const meetupsCollection = db.collection(\"meetups\"); //3. find메서드 호출\n  //find메서드는 기본적으로 해당컬렉션에 모든 문서를 찾음\n  //프로미스를 반환하므로 await사용\n  //find다음에 toArray를 이용해야 문서의 배열을 다시 받을 수 있음\n\n  const meetups = await meetupsCollection.find().toArray(); //4. 몽고디비 패칭을 완료한후 연결 차단\n\n  clinet.close(); //5. props의 meetups를 매핑해줌\n\n  return {\n    props: {\n      meetups: meetups.map(meetup => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        id: meetup._id.toString()\n      }))\n    },\n    revalidate: 10\n  };\n}\nexport default HomePage;","map":{"version":3,"sources":["C:/Udemy-react/nextjs/pages/index.js"],"names":["MongoClient","MeetupList","HomePage","props","meetups","getStaticProps","clinet","connect","db","meetupsCollection","collection","find","toArray","close","map","meetup","title","address","image","id","_id","toString","revalidate"],"mappings":";;AAAA;AACA,SAASA,WAAT,QAA4B,SAA5B;AAEA,OAAOC,UAAP,MAAuB,kCAAvB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,sBAAO,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,MAAM,GAAG,MAAMN,WAAW,CAACO,OAAZ,CACnB,mGADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CARqC,CAUrC;AACA;AACA;AACA;;AACA,QAAMN,OAAO,GAAG,MAAMK,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB,CAdqC,CAgBrC;;AACAN,EAAAA,MAAM,CAACO,KAAP,GAjBqC,CAkBrC;;AACA,SAAO;AACLV,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEA,OAAO,CAACU,GAAR,CAAaC,MAAD,KAAa;AAChCC,QAAAA,KAAK,EAAED,MAAM,CAACC,KADkB;AAEhCC,QAAAA,OAAO,EAAEF,MAAM,CAACE,OAFgB;AAGhCC,QAAAA,KAAK,EAAEH,MAAM,CAACG,KAHkB;AAIhCC,QAAAA,EAAE,EAAEJ,MAAM,CAACK,GAAP,CAAWC,QAAX;AAJ4B,OAAb,CAAZ;AADJ,KADF;AASLC,IAAAA,UAAU,EAAE;AATP,GAAP;AAWD;AAED,eAAepB,QAAf","sourcesContent":["//1. 몽고디비 임포트\r\nimport { MongoClient } from \"mongodb\";\r\n\r\nimport MeetupList from \"../components/meetups/MeetupList\";\r\n\r\nfunction HomePage(props) {\r\n  return <MeetupList meetups={props.meetups} />;\r\n}\r\n\r\nexport async function getStaticProps() {\r\n  //2. new-meetup작업할 때 사용했던 것을 붙여넣기\r\n  const clinet = await MongoClient.connect(\r\n    \"mongodb+srv://ho04029:4Fils6gxzqhCs40l@boilerplate.xzicw.mongodb.net/?retryWrites=true&w=majority\"\r\n  );\r\n\r\n  const db = clinet.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  //3. find메서드 호출\r\n  //find메서드는 기본적으로 해당컬렉션에 모든 문서를 찾음\r\n  //프로미스를 반환하므로 await사용\r\n  //find다음에 toArray를 이용해야 문서의 배열을 다시 받을 수 있음\r\n  const meetups = await meetupsCollection.find().toArray();\r\n\r\n  //4. 몽고디비 패칭을 완료한후 연결 차단\r\n  clinet.close();\r\n  //5. props의 meetups를 매핑해줌\r\n  return {\r\n    props: {\r\n      meetups: meetups.map((meetup) => ({\r\n        title: meetup.title,\r\n        address: meetup.address,\r\n        image: meetup.image,\r\n        id: meetup._id.toString(),\r\n      })),\r\n    },\r\n    revalidate: 10,\r\n  };\r\n}\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}