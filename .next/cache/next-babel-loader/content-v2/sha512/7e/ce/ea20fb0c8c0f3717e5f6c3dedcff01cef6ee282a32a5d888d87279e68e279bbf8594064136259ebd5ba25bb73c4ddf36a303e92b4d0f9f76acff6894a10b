{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Udemy-react\\\\nextjs\\\\pages\\\\index.js\";\n//1. 몽고디비 임포트\nimport { MongoClient } from \"mongodb\";\nimport MeetupList from \"../components/meetups/MeetupList\";\nconst DUMMY_MEETUPS = [{\n  id: \"m1\",\n  title: \"A First Meetup\",\n  image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\n  address: \"Some address 5, 12345 Some City\",\n  description: \"This is a first meetup!\"\n}, {\n  id: \"m2\",\n  title: \"A Second Meetup\",\n  image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\n  address: \"Some address 10, 12345 Some City\",\n  description: \"This is a second meetup!\"\n}];\n\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 10\n  }, this);\n} // export async function getServrSideProps(context) {\n//   const req = context.req;\n//   const res = context.res;\n//   return {\n//     props: DUMMY_MEETUPS,\n//   };\n// }\n\n\nexport async function getStaticProps() {\n  //2. new-meetup작업할 때 사용했던 것을 붙여넣기\n  const clinet = await MongoClient.connect(\"mongodb+srv://ho04029:4Fils6gxzqhCs40l@boilerplate.xzicw.mongodb.net/?retryWrites=true&w=majority\");\n  const db = clinet.db();\n  const meetupsCollection = db.collection(\"meetups\"); //3. find메서드 호출\n  //find메서드는 기본적으로 해당컬렉션에 모든 문서를 찾음\n  //프로미스를 반환하므로 await사용\n  //find다음에 toArray를 이용해야 문서의 배열을 다시 받을 수 있음\n\n  const meetups = await meetupsCollection.find().toArray(); //4. 몽고디비 패칭을 완료한후 연결 차단\n\n  clinet.close();\n  return {\n    props: {\n      meetups: meetups\n    },\n    revalidate: 10\n  };\n}\nexport default HomePage;","map":{"version":3,"sources":["C:/Udemy-react/nextjs/pages/index.js"],"names":["MongoClient","MeetupList","DUMMY_MEETUPS","id","title","image","address","description","HomePage","props","meetups","getStaticProps","clinet","connect","db","meetupsCollection","collection","find","toArray","close","revalidate"],"mappings":";;AAAA;AACA,SAASA,WAAT,QAA4B,SAA5B;AAEA,OAAOC,UAAP,MAAuB,kCAAvB;AAEA,MAAMC,aAAa,GAAG,CACpB;AACEC,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,gBAFT;AAGEC,EAAAA,KAAK,EACH,wHAJJ;AAKEC,EAAAA,OAAO,EAAE,iCALX;AAMEC,EAAAA,WAAW,EAAE;AANf,CADoB,EASpB;AACEJ,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,iBAFT;AAGEC,EAAAA,KAAK,EACH,wHAJJ;AAKEC,EAAAA,OAAO,EAAE,kCALX;AAMEC,EAAAA,WAAW,EAAE;AANf,CAToB,CAAtB;;AAmBA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,sBAAO,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,MAAM,GAAG,MAAMZ,WAAW,CAACa,OAAZ,CACnB,mGADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CARqC,CAUrC;AACA;AACA;AACA;;AACA,QAAMN,OAAO,GAAG,MAAMK,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB,CAdqC,CAgBrC;;AACAN,EAAAA,MAAM,CAACO,KAAP;AACA,SAAO;AAAEV,IAAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAEA;AAAX,KAAT;AAA+BU,IAAAA,UAAU,EAAE;AAA3C,GAAP;AACD;AAED,eAAeZ,QAAf","sourcesContent":["//1. 몽고디비 임포트\r\nimport { MongoClient } from \"mongodb\";\r\n\r\nimport MeetupList from \"../components/meetups/MeetupList\";\r\n\r\nconst DUMMY_MEETUPS = [\r\n  {\r\n    id: \"m1\",\r\n    title: \"A First Meetup\",\r\n    image:\r\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\r\n    address: \"Some address 5, 12345 Some City\",\r\n    description: \"This is a first meetup!\",\r\n  },\r\n  {\r\n    id: \"m2\",\r\n    title: \"A Second Meetup\",\r\n    image:\r\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\r\n    address: \"Some address 10, 12345 Some City\",\r\n    description: \"This is a second meetup!\",\r\n  },\r\n];\r\n\r\nfunction HomePage(props) {\r\n  return <MeetupList meetups={props.meetups} />;\r\n}\r\n\r\n// export async function getServrSideProps(context) {\r\n//   const req = context.req;\r\n//   const res = context.res;\r\n//   return {\r\n//     props: DUMMY_MEETUPS,\r\n//   };\r\n// }\r\n\r\nexport async function getStaticProps() {\r\n  //2. new-meetup작업할 때 사용했던 것을 붙여넣기\r\n  const clinet = await MongoClient.connect(\r\n    \"mongodb+srv://ho04029:4Fils6gxzqhCs40l@boilerplate.xzicw.mongodb.net/?retryWrites=true&w=majority\"\r\n  );\r\n\r\n  const db = clinet.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  //3. find메서드 호출\r\n  //find메서드는 기본적으로 해당컬렉션에 모든 문서를 찾음\r\n  //프로미스를 반환하므로 await사용\r\n  //find다음에 toArray를 이용해야 문서의 배열을 다시 받을 수 있음\r\n  const meetups = await meetupsCollection.find().toArray();\r\n\r\n  //4. 몽고디비 패칭을 완료한후 연결 차단\r\n  clinet.close();\r\n  return { props: { meetups: meetups }, revalidate: 10 };\r\n}\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}