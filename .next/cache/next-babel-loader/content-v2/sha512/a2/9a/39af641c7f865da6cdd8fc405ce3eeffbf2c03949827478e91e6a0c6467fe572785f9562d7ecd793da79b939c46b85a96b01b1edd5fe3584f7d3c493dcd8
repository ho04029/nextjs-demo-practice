{"ast":null,"code":"//1. 임포트\nimport { MongoClient } from \"mongodb\";\n\nasync function handler(req, res) {\n  if (req.method === \"POST\") {\n    console.log(\"여기까지는 옴\");\n    const data = req.body; //2.connect메서드 호출\n    //매개변수로 몽고디비 클러스터 connect에 잇던 주소를 붙여넣기\n    //복사한 주소의 username과 password부분 database access에서\n    //설정했던 걸로 넣어주기\n    //promise가 반환되기 때문에 await추가\n\n    const clinet = await MongoClient.connect(\"mongodb+srv://ho04029:4Fils6gxzqhCs40l@boilerplate.xzicw.mongodb.net/?retryWrites=true&w=majority\"); //3. db메소드를 통해 연결중인 데이터베이스 확보\n\n    const db = clinet.db(); //4. 데이터베이스와 컬렉션 메서드를 사용하여 컬렉션을 보관\n    //괄호안에 적힌 'meetups'가 컬렉션의 이름이 됨\n\n    const meetupsCollection = db.collection(\"meetups\"); //5. collection에서는 컬렉션에 새 문서를 삽입하기 위해\n    //구축된 query명령 중 하나인 insertOne을 호출할 수 있음\n    //몽고디비의 문서는 object이기 때문에 이런식으로 직접 데이터 삽입가능\n    //insertOne은 프로미스를 반환하므로 await함께 사용\n    //결과값은 자동으로 생성된 ID를 가진 객체가 됨\n\n    const result = await meetupsCollection.insertOne(data);\n    console.log(result); //6.작업을 마쳤기 대무에 client.close로 데이터베이스 연결 차단\n\n    clinet.close(); //7. 응답객체를 사용하여 응답보내기\n    //요청이 들어오면 디비에 데이터를 저장하고 다시 응답을 보내야하기 때문\n\n    res.status(201).json({\n      message: \"Meetup inserted!\"\n    });\n  }\n}\n\nexport default handler;","map":{"version":3,"sources":["C:/Udemy-react/nextjs/pages/api/new-meetup.js"],"names":["MongoClient","handler","req","res","method","console","log","data","body","clinet","connect","db","meetupsCollection","collection","result","insertOne","close","status","json","message"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,SAA5B;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,UAAMC,IAAI,GAAGL,GAAG,CAACM,IAAjB,CAFyB,CAIzB;AACA;AACA;AACA;AACA;;AACA,UAAMC,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CACnB,mGADmB,CAArB,CATyB,CAazB;;AACA,UAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX,CAdyB,CAgBzB;AACA;;AACA,UAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CAlByB,CAmBzB;AACA;AACA;AACA;AACA;;AACA,UAAMC,MAAM,GAAG,MAAMF,iBAAiB,CAACG,SAAlB,CAA4BR,IAA5B,CAArB;AAEAF,IAAAA,OAAO,CAACC,GAAR,CAAYQ,MAAZ,EA1ByB,CA4BzB;;AACAL,IAAAA,MAAM,CAACO,KAAP,GA7ByB,CA+BzB;AACA;;AACAb,IAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACD;AACF;;AAED,eAAelB,OAAf","sourcesContent":["//1. 임포트\r\nimport { MongoClient } from \"mongodb\";\r\n\r\nasync function handler(req, res) {\r\n  if (req.method === \"POST\") {\r\n    console.log(\"여기까지는 옴\");\r\n    const data = req.body;\r\n\r\n    //2.connect메서드 호출\r\n    //매개변수로 몽고디비 클러스터 connect에 잇던 주소를 붙여넣기\r\n    //복사한 주소의 username과 password부분 database access에서\r\n    //설정했던 걸로 넣어주기\r\n    //promise가 반환되기 때문에 await추가\r\n    const clinet = await MongoClient.connect(\r\n      \"mongodb+srv://ho04029:4Fils6gxzqhCs40l@boilerplate.xzicw.mongodb.net/?retryWrites=true&w=majority\"\r\n    );\r\n\r\n    //3. db메소드를 통해 연결중인 데이터베이스 확보\r\n    const db = clinet.db();\r\n\r\n    //4. 데이터베이스와 컬렉션 메서드를 사용하여 컬렉션을 보관\r\n    //괄호안에 적힌 'meetups'가 컬렉션의 이름이 됨\r\n    const meetupsCollection = db.collection(\"meetups\");\r\n    //5. collection에서는 컬렉션에 새 문서를 삽입하기 위해\r\n    //구축된 query명령 중 하나인 insertOne을 호출할 수 있음\r\n    //몽고디비의 문서는 object이기 때문에 이런식으로 직접 데이터 삽입가능\r\n    //insertOne은 프로미스를 반환하므로 await함께 사용\r\n    //결과값은 자동으로 생성된 ID를 가진 객체가 됨\r\n    const result = await meetupsCollection.insertOne(data);\r\n\r\n    console.log(result);\r\n\r\n    //6.작업을 마쳤기 대무에 client.close로 데이터베이스 연결 차단\r\n    clinet.close();\r\n\r\n    //7. 응답객체를 사용하여 응답보내기\r\n    //요청이 들어오면 디비에 데이터를 저장하고 다시 응답을 보내야하기 때문\r\n    res.status(201).json({ message: \"Meetup inserted!\" });\r\n  }\r\n}\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}